name: Build uug-demo-api container
env:
  FE_IMAGE_NAME: birds-app-front-end
  BE_IMAGE_NAME: birds-app-back-end
  REGISTRY: ghcr.io/ripleymj
on:
  push:
    paths-ignore:
      - 'k8s/**'

jobs:
  check:
    name: Run repo lint and sanity checks
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          pip3 install yamllint j2cli
      - name: Run Jinja
        run: |
          j2 -o k8s/deployment.yaml templates/deployment.yaml.j2
          j2 -o k8s/service.yaml templates/service.yaml.j2
          j2 -o k8s/ingress.yaml templates/ingress.yaml.j2
        env:
          version: ${{ github.sha }}
      - name: Run actions yamllint
        run: |
          yamllint -d "{extends: default, rules: {line-length: {max: 120}}}" k8s/*
      - name: Fetch and untar kubeval
        run: |
          wget -nv https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar zxf kubeval-linux-amd64.tar.gz
      - name: Run kubeval
        run: |
          ./kubeval --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master -d k8s
  build-back-end:
    name: Build back-end
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
      - name: Install GoLang
        uses: actions/setup-go@v3
      - name: Download dependencies
        run: |
          cd back-end
          go mod download
      - name: Build application
        run: |
          cd back-end
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app .
      - name: Buildah Action
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.BE_IMAGE_NAME }}
          tags: latest ${{ github.sha }}
          containerfiles: |
            back-end/Containerfile
      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Repository
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      - name: Print image URL
        run: echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"
  test-back-end:
    name: Test back-end
    needs: build-back-end
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      birds-app-back-end:
        image: ghcr.io/ripleymj/birds-app-back-end:latest
        ports:
          - 8080:8080
    steps:
      - name: Test fetching from container
        run: |
          sleep 5
          curl http://localhost:8080

  build-front-end:
    name: Build front-end
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Build app
        run: |
          cd front-end
          npm ci --silent
          npm install react-scripts -g --silent
          npm run build

  test-front-end:
    name: Test front-end
    needs: build-front-end
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2

  publish:
    name: Publish Updated Image
    needs: [test-front-end, test-back-end]
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          pip3 install j2cli
      - name: Run Jinja
        run: |
          j2 -o k8s/deployment.yaml templates/deployment.yaml.j2
          j2 -o k8s/service.yaml templates/service.yaml.j2
          j2 -o k8s/ingress.yaml templates/ingress.yaml.j2
        env:
          version: ${{ github.sha }}
      - run: |
          git config --global user.email "bot@github.com"
          git config --global user.name "GitHub Bot"
          git add k8s/
          git commit -m "Publish new image"
          git push 
